// Common functions used by more sub-projects

import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os

def getOsSpecificCommandLine(args) {
    return isWindowsBased() ? ['cmd', '/c'] + args : ['/usr/bin/env'] + args
}

def isWindowsBased() {
    return Os.isFamily(Os.FAMILY_WINDOWS)
}

def detectBackendClusterMode(defaultBackendMode = "internal") {
    String mode = [project.hasProperty("backendMode") ? project["backendMode"] : null,
                   System.properties["backendMode"],
                   defaultBackendMode
    ].find { h -> h != null } // first match
    // Return env

    logger.info("* Test will be running in '$mode' cluster mode (configure via property 'backendMode')")
    return mode
}

//
// Represents location of H2O jar
//
def h2oJarLocation() {
    return "http://h2o-release.s3.amazonaws.com/h2o/${h2oMajorName != "master" ? "rel-${h2oMajorName}" : "master"}/${h2oBuild}/h2o-${h2oMajorVersion}.${h2oBuild}.zip"
}

def getGitHash() {
    def proc = ['git', 'rev-parse', '--verify', 'HEAD'].execute()
    return proc.text.trim()
}

String getGitBranch() {
    def branchName = System.getenv("BRANCH_NAME")
    if (branchName != null) {
        return branchName.toString()
    } else {
        def proc = ['git', 'rev-parse', '--verify', '--abbrev-ref', 'HEAD'].execute()
        return proc.text.trim().toString()
    }
}

def getH2OBranch(h2oMajorName) {
    return (h2oMajorName == "master" || h2oMajorName == "bleeding_edge") ? "master" : "rel-${h2oMajorName}"
}

def getH2OBuild(h2oBuild) {
    if (h2oBuild == "1-SNAPSHOT") {
        return "https://h2o-release.s3.amazonaws.com/h2o/master/latest".toURL().text.trim()
    } else {
        return h2oBuild
    }
}

static def getBuildInfo(h2oMajorName, h2oBuild) {
    if (h2oMajorName == "bleeding_edge") {
        // We are building against H2O published to Maven local
        // In this case we need to read the supported Hadoop distributions directly from H2O-3
        // code, therefore the H2O_HOME env variable needs to be setup
        def content = "file://${System.getenv("H2O_HOME")}/h2o-dist/buildinfo.json".toURL().text
        return content.replaceAll("SUBST_BUILD_TIME_MILLIS", "1").replaceAll("SUBST_BUILD_NUMBER", "1")
    } else {
        def relName = h2oMajorName != "master" ? "rel-${h2oMajorName}" : "master"
        return "https://s3.amazonaws.com/h2o-release/h2o/${relName}/${h2oBuild}/buildinfo.json".toURL().text
    }
}

/**
 * Return list of Hadoop distributions for this Sparkling Water
 */
def getSupportedHadoopDistributions(h2oMajorName, h2oBuild) {
    def buildInfo = getBuildInfo(h2oMajorName, h2oBuild)
    def jsonResp = new JsonSlurper().parseText(buildInfo)
    // we need to ensure that the distribution names does not contain minor versions
    def distributions = jsonResp.hadoop_distributions.collect { it.distribution }
    return distributions.join(" ")
}

def getSparkSpecificSourceDir(sparkMajorVersion) {
    if (file("src/main/scala_spark_$sparkMajorVersion").exists()) {
        return ["src/main/scala_spark_$sparkMajorVersion"]
    } else if (file("src/main/scala_spark_others").exists()) {
        return ["src/main/scala_spark_others"]
    } else {
        return []
    }
}

def getSparkSpecificResourceDir(sparkMajorVersion) {
    if (file("src/main/resources_spark_$sparkMajorVersion").exists()) {
        return ["src/main/resources_spark_$sparkMajorVersion"]
    } else if (file("src/main/resources_spark_others").exists()) {
        return ["src/main/resources_spark_others"]
    } else {
        return []
    }
}

def getS3Path() {
    def branch = getGitBranch()
    def formattedSWBranch = branch.replaceAll("/", "-")
    String path
    if (project.hasProperty("buildAgainstH2OBranch")) {
        def h2oBranch = project.property("buildAgainstH2OBranch")
        def formattedH2OBranch = h2oBranch.replaceAll("/", "-")
        path = "${formattedSWBranch}_${formattedH2OBranch}"
    } else {
        def majorVersion = "${version.split("\\.")[0]}.${version.split("\\.")[1]}"
        def relBranch = "rel-${majorVersion}"
        if (branch == relBranch) {
            path = ""
        } else {
            path = "${formattedSWBranch}"
        }
    }
    if (isNightlyBuild.toBoolean()) {
        if (path != "") {
            path = "${path}/nightly"
        } else {
            path = "nightly"
        }
    }

    if (path != "") {
        path = "${path}/"
    }
    return path
}

// Export methods by turning them into closures
ext {
    getOsSpecificCommandLine = this.&getOsSpecificCommandLine
    isWindowsBased = this.&isWindowsBased
    detectBackendClusterMode = this.&detectBackendClusterMode
    h2oJarLocation = this.&h2oJarLocation
    getGitHash = this.&getGitHash
    getGitBranch = this.&getGitBranch
    getH2OBranch = this.&getH2OBranch
    getH2OBuild = this.&getH2OBuild
    getSupportedHadoopDistributions = this.&getSupportedHadoopDistributions
    getSparkSpecificSourceDir = this.&getSparkSpecificSourceDir
    getSparkSpecificResourceDir = this.&getSparkSpecificResourceDir
    getS3Path = this.&getS3Path
}
