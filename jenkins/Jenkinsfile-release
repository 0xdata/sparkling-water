@Library('test-shared-library') _

pipeline {
    agent {label 'master'}
    
    parameters {
        booleanParam(name: 'prepareReleaseNotes', defaultValue: true, description: 'Prepare release notes')
        booleanParam(name: 'publishToNexus', defaultValue: true, description: 'Publish to Nexus')
        booleanParam(name: 'buildConda', defaultValue: true, description: 'Build Conda')
        booleanParam(name: 'buildExtendedH2OJars', defaultValue: true, description: 'Build extended H2O Jars')
        booleanParam(name: 'publishToS3', defaultValue: true, description: 'Publish to S3')
        booleanParam(name: 'updateDocLinks', defaultValue: true, description: 'Update documentation links')
        booleanParam(name: 'publishToPiPy', defaultValue: true, description: 'Publish to PiPy')
        booleanParam(name: 'publishConda', defaultValue: true, description: 'Publish to Conda')
        booleanParam(name: 'releaseOnGithub', defaultValue: true, description: 'Release on Github')
    }

    stages {

        stage('Clean Workspace') {
            steps {
                sh  """
                        rm -rf *
                    """
            }
        }

        stage('Clone the repository'){
            steps{
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {
                            checkout scm
                        }
                    }
                }
            }
        }

        stage ('Prepare release notes'){
            when {
                expression { params.prepareReleaseNotes == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {
                            withCredentials([file(credentialsId: 'master-id-rsa', variable: 'ID_RSA_PATH'), file(credentialsId: 'master-gitconfig', variable: 'GITCONFIG_PATH'), string(credentialsId: 'h2o-ops-personal-auth-token', variable: 'GITHUB_TOKEN')]){
                                sh """
                                   # Copy keys
                                   mkdir -p ~/.ssh
                                   cp \${ID_RSA_PATH} ~/.ssh/id_rsa
                                   cp \${GITCONFIG_PATH} ~/.gitconfig
                                   """

                                sh """
                                sed -i.backup -E "s/\\.([0-9]+)-SNAPSHOT/.\\1/" gradle.properties
                                REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                                PATCH_VERSION=`echo \$REL_VERSION | cut -f3 -d.`
                                git checkout -- gradle.properties

                                # Get id of this release
                                jira_version_id=\$(curl --silent "https://0xdata.atlassian.net/rest/api/2/project/SW/versions" | tr '}' '\\n' | grep "\\"name\\":\\"\$REL_VERSION\\"" | cut -d'"' -f8)
                                # Get the JIRA page (currently, there is no endpoint for release notes)
                                release_notes_page="https://0xdata.atlassian.net/secure/ReleaseNote.jspa?projectId=12000&version=\${jira_version_id}"

                                # Obtain the release notes and process them so they look like we expect
                                curl --silent "\$release_notes_page" | sed '/<body>/,/<a name="editarea"><\\/a>/!d;//D' | sed 's/<ul>//' | sed 's/<\\/ul>//' | sed 's/ *<h2>/-  /' | sed 's/<\\/h2>//'  | sed 's/<\\/li>//' | sed "s/ *<li>\\[<a href='https:\\/\\/0xdata.atlassian.net\\/browse\\/SW-\\([0-9]*\\)'>SW-[0-9]*<\\/a>\\]/\\   -  \\`SW-\\1 <https:\\/\\/0xdata.atlassian.net\\/browse\\/SW-\\1>\\`__/" | sed '\$ d' | sed '1d' > release_notes

                                # Put the release notes into the doc/CHANGELOG.rst

                                release_date=\$(date +%Y-%m-%d)
                                rel_prefix=\$(echo "v\$REL_VERSION (\$release_date)")
                                underscores=\$(head -c \${#rel_prefix} < /dev/zero | tr '\\0' '-')
                                download_line="Download at: \\`http://h2o-release.s3.amazonaws.com/sparkling-water/${env.BRANCH_NAME}/\$PATCH_VERSION/index.html <http://h2o-release.s3.amazonaws.com/sparkling-water/${env.BRANCH_NAME}/\$PATCH_VERSION/index.html>\\`__"

                                # Release notes
                                echo \$rel_prefix
                                echo \$underscores
                                echo
                                cat release_notes

                                # Insert release info
                                sed -i "4i \$rel_prefix" doc/CHANGELOG.rst

                                # Insert the underscores
                                sed -i "5i \$underscores" doc/CHANGELOG.rst

                                # Insert the download link
                                sed -i "6i \$download_line" doc/CHANGELOG.rst

                                # Insert the release notes
                                sed -i "6r release_notes" doc/CHANGELOG.rst

                                rm -rf release_notes
                                git add doc/CHANGELOG.rst

                                git config remote.origin.url "https://${GITHUB_TOKEN}@github.com/h2oai/sparkling-water.git"
                                git commit -m "Release notes for \$REL_VERSION"
                                git push --set-upstream origin ${env.BRANCH_NAME}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Build Sparkling Water Distribution'){
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {

                            withCredentials([usernamePassword(credentialsId: "LOCAL_NEXUS", usernameVariable: 'LOCAL_NEXUS_USERNAME', passwordVariable: 'LOCAL_NEXUS_PASSWORD')]) {

                                sh "activate_java_8"

                                sh """
                                sed -i.backup -E "s/\\.([0-9]+)-SNAPSHOT/.\\1/" gradle.properties
                                REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`

                                echo
                                echo "RELEASE VERSION: \${REL_VERSION}"
                                echo

                                # Perform a build
                                ./gradlew dist -PlocalNexusUsername=$LOCAL_NEXUS_USERNAME -PlocalNexusPassword=$LOCAL_NEXUS_PASSWORD
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Build Conda Packages'){
                    when {
                        expression { params.buildConda == true }
                    }
              steps {
                    script {
                        docker.withRegistry("http://harbor.h2o.ai") {
                            docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {
                                dir("py/build/conda") {
                                    def PYTHON_VERSIONS = ['2.7', '3.6']
                                    sh """
                                        conda config --add channels conda-forge
                                       """
                                    for (pyVersion in PYTHON_VERSIONS) {

                                        sh """
                                            . /envs/h2o_env_python3.6/bin/activate

                                            conda build h2o_pysparkling_2.2 --output-folder "." --no-anaconda-upload --py ${pyVersion}

                                            PACKAGE_PATH=\$(conda build h2o_pysparkling_2.2 --py ${pyVersion} --output-folder "." --output | tail -1)
                                            CURRENT_PLATFORM=\$(basename \$(dirname \$PACKAGE_PATH))
                                            mkdir -p ../../../dist/build/dist/py/conda/\$CURRENT_PLATFORM
                                            cp \$PACKAGE_PATH ../../../dist/build/dist/py/conda/\$CURRENT_PLATFORM/

                                            conda convert \$PACKAGE_PATH -p linux-32 -o ../../../dist/build/dist/py/conda/
                                            conda convert \$PACKAGE_PATH -p linux-64 -o ../../../dist/build/dist/py/conda/
                                            conda convert \$PACKAGE_PATH -p win-32 -o ../../../dist/build/dist/py/conda/
                                            conda convert \$PACKAGE_PATH -p win-64 -o ../../../dist/build/dist/py/conda/
                                            conda convert \$PACKAGE_PATH -p osx-64 -o ../../../dist/build/dist/py/conda/
                                           """
                                    }
                                }
                            }
                        }
                    }
              }
        }

        stage('Publish to Nexus'){
            when {
                expression { params.publishToNexus == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {

                            withCredentials([usernamePassword(credentialsId: "PUBLIC_NEXUS", usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD'),
                                             usernamePassword(credentialsId: "SIGNING_KEY", usernameVariable: 'SIGN_KEY', passwordVariable: 'SIGN_PASSWORD'),
                                             file(credentialsId: 'release-secret-key-ring-file', variable: 'RING_FILE_PATH')]) {
                                sh  """
                                    ./gradlew -PdoRelease -PnexusUsername=${NEXUS_USERNAME} -PnexusPassword=${NEXUS_PASSWORD} -Psigning.keyId=${SIGN_KEY} -Psigning.secretKeyRingFile=${RING_FILE_PATH} -Psigning.password= publishToNexus -x check
                                    """
                            }
                        }
                    }
                }
            }
        }

        stage('Create Extended H2O Jars'){
            when {
                expression { params.buildExtendedH2OJars == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {
                            sh """
                                    # Create extended H2O jar for all supported hadoop distributions
                                    HADOOP_DISTRIBUTIONS=`./gradlew -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false -q :sparkling-water-assembly-h2o:printHadoopDistributions)`
                                    for distro in \${HADOOP_DISTRIBUTIONS}
                                    do
                                      ./gradlew -PdoExtend extendJar -PdownloadH2O="\${distro}"
                                    done
                                    # Create extended H2O jar also for the regular h2o (no H2O driver)
                                    ./gradlew -PdoExtend extendJar -PdownloadH2O

                                    # Copy to directory which is uploaded to S3
                                    cp -R assembly-h2o/private/extended dist/build/dist/
                                """
                        }
                    }
                }
            }
        }

        stage('Publish to S3') {
            when {
                expression { params.publishToS3 == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {

                            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS S3 Credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                sh """
                                    REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                                    PATCH_VERSION=`echo \$REL_VERSION | cut -f3 -d.`

                                    pip install awscli --upgrade --user
                                    export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                                    export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                                    ~/.local/bin/aws s3 sync dist/build/dist s3://h2o-release/sparkling-water/${BRANCH_NAME}/\$PATCH_VERSION/ --acl public-read

                                    echo UPDATE LATEST POINTER
                                    echo \$PATCH_VERSION > latest
                                    echo "<head>" > latest.html
                                    echo "<meta http-equiv=\\"refresh\\" content=\\"0; url=\$PATCH_VERSION/index.html\\" />" >> latest.html
                                    echo "</head>" >> latest.html

                                    ~/.local/bin/aws s3 cp latest s3://h2o-release/sparkling-water/${BRANCH_NAME}/latest --acl public-read
                                    ~/.local/bin/aws s3 cp latest.html s3://h2o-release/sparkling-water/${BRANCH_NAME}/latest.html --acl public-read
                                    ~/.local/bin/aws s3 cp latest.html s3://h2o-release/sparkling-water/${BRANCH_NAME}/index.html --acl public-read
                                    """
                            }
                        }
                    }
                }
            }
        }

        stage('Update the Documentation links') {
            when {
                expression { params.updateDocLinks == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {
                            withCredentials([file(credentialsId: 'master-id-rsa', variable: 'ID_RSA_PATH'), file(credentialsId: 'master-gitconfig', variable: 'GITCONFIG_PATH'), string(credentialsId: 'h2o-ops-personal-auth-token', variable: 'GITHUB_TOKEN'), sshUserPrivateKey(credentialsId: 'h2oOpsGitPrivateKey', keyFileVariable: 'SSH_KEY_GITHUB')]){

                            sh """
                               # Copy keys
                               mkdir -p ~/.ssh
                               cp \${ID_RSA_PATH} ~/.ssh/id_rsa
                               cp \${GITCONFIG_PATH} ~/.gitconfig

cat <<EOF >>  ~/.ssh/config
Host github.com
   HostName github.com
   User git
   IdentityFile \${SSH_KEY_GITHUB}
   IdentitiesOnly yes
EOF

                                ssh-keyscan github.com >> ~/.ssh/known_hosts
                               """

                            // Update the links
                            retryWithDelay(3, 120, {
                            sh """

                                REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                                PATCH_VERSION=`echo \$REL_VERSION | cut -f3 -d.`

                                git clone git@github.com:h2oai/docs.h2o.ai.git
                                cd docs.h2o.ai/sites-available/
                                sed -i.backup -E "s?http://h2o-release.s3.amazonaws.com/sparkling-water/rel-2.2/[0-9]+/?http://h2o-release.s3.amazonaws.com/sparkling-water/rel-2.2/\$PATCH_VERSION/?" 000-default.conf
                                git add 000-default.conf
                                git commit -m "Update links of Sparkling Water 2.2 version to \$PATCH_VERSION"
                                git push --set-upstream origin master
                                cd ../..
                                rm -rf docs.h2o.ai
                            """ })

                            }
                        }
                    }
                }
            }
        }

        stage('Publish To PyPi') {
            when {
                expression { params.buildPySparkling == true && params.publishToPiPy == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {

                            dir("py/build/pkg") {
                                withCredentials([usernamePassword(credentialsId: "pypi-credentials", usernameVariable: 'PIPY_USERNAME', passwordVariable: 'PIPY_PASSWORD')]) {
                                    sh  """
                                        . /envs/h2o_env_python3.6/bin/activate
                                        python setup.py sdist
                                        twine upload dist/* -u $PIPY_USERNAME -p $PIPY_PASSWORD
                                        """
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Publish To Conda') {
            when {
                expression { params.buildConda == true && params.publishConda == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {

                            dir("py/build/conda") {
                                withCredentials([usernamePassword(credentialsId: 'anaconda-credentials', usernameVariable: 'ANACONDA_USERNAME', passwordVariable: 'ANACONDA_PASSWORD')]) {
                                     // Upload Conda packages of PySparkling
                                    def PYTHON_VERSIONS = ['2.7', '3.6']
                                    for (pyVersion in PYTHON_VERSIONS) {
                                             sh """
                                                CONDA_PKG_CURRENT_ARCH_PATH=\$(conda build h2o_pysparkling_2.2 --py ${pyVersion} --output-folder "." --output | tail -1)
                                                PKG_NAME=\$(basename \$CONDA_PKG_CURRENT_ARCH_PATH)

                                                # Upload Conda packages of PySparkling
                                                yes | anaconda login --username ${ANACONDA_USERNAME} --password ${ANACONDA_PASSWORD}

                                                anaconda upload --force ../../../dist/build/dist/py/conda/osx-64/\${PKG_NAME}
                                                anaconda upload --force ../../../dist/build/dist/py/conda/linux-32/\${PKG_NAME}
                                                anaconda upload --force ../../../dist/build/dist/py/conda/linux-64/\${PKG_NAME}
                                                anaconda upload --force ../../../dist/build/dist/py/conda/win-32/\${PKG_NAME}
                                                anaconda upload --force ../../../dist/build/dist/py/conda/win-64/\${PKG_NAME}
                                                """
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // Update the version on Github if all stages went fine correctly
        stage('Release on Github'){
            when {
                expression { params.releaseOnGithub == true }
            }
            steps {
                script {
                    docker.withRegistry("http://harbor.h2o.ai") {
                        docker.image('opsh2oai/sparkling_water_tests:15').inside("--init --privileged --dns 172.16.0.200") {
                            withCredentials([file(credentialsId: 'master-id-rsa', variable: 'ID_RSA_PATH'), file(credentialsId: 'master-gitconfig', variable: 'GITCONFIG_PATH'), string(credentialsId: 'h2o-ops-personal-auth-token', variable: 'GITHUB_TOKEN')]){
                            sh """
                               # Copy keys
                               mkdir -p ~/.ssh
                               cp \${ID_RSA_PATH} ~/.ssh/id_rsa
                               cp \${GITCONFIG_PATH} ~/.gitconfig
                               """


                            sh  """
                                git config remote.origin.url "https://${GITHUB_TOKEN}@github.com/h2oai/sparkling-water.git"

                                # Calculate the current and future version
                                sed -i.backup -E "s/\\.([0-9]+)-SNAPSHOT/.\\1/" gradle.properties
                                REL_VERSION=`cat gradle.properties | grep version | grep -v '#' | sed -e "s/.*=//"`
                                MAJOR_MINOR=`echo \$REL_VERSION | cut -f1,2 -d.`
                                PATCH_VERSION=`echo \$REL_VERSION | cut -f3 -d.`
                                NEW_PATCH_VERSION=\$((\$PATCH_VERSION + 1))
                                NEW_VERSION=\$MAJOR_MINOR.\$NEW_PATCH_VERSION-SNAPSHOT

                                # Restore before releasing
                                git checkout -- gradle.properties
                                ./gradlew -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=\${REL_VERSION} -Prelease.newVersion=\${NEW_VERSION} -PdoRelease release -x check

                                # Note:
                                # After this step, gradle.properties has the new future version ending with "-SNAPSHOT" so
                                # we change it back to the version of the current release in case the following stages
                                # require to use the correct version

                                git checkout -- gradle.properties
                                sed -i.backup -E "s/\\.([0-9]+)-SNAPSHOT/.\\1/" gradle.properties
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}
